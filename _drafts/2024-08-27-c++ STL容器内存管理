
# STL容器内存管理

在使用STL容器时，需要面对各种可能数据类型进行管理，它们有的是基本数据类型，有的是结构体、有的是类对象，也有的是这些类型的指针，或是其他更加复杂的复合形式。在如此复杂的情形下，稍有不慎就会导致野指针、内存泄漏等问题，本文就如何正确处理这些问题做一个归纳总结


## 元素为简单类型

这里将简单类型定义为**不包含指针成员的任何类型**
1. 基本数据类型，`char` `int` `float` `double`
2. 不包含指针类型的结构体
3. 



```
    vector<int> v;
    v.push_back(666);       // 加入新元素
    int elem = v[0];        // 取出元素
```

这样的操作没有任何问题，加入和取出的元素都没有任何**内部状态**，换句话说，它们不享有除了自身以外的对其他内存空间的**控制权**

## 元素为简单数据类型



